# -*- coding: utf-8 -*-
"""lista-contactos

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/171Es20Pq0E47I95XtZSb1dzREd7inDKG
"""

import json
from operator import itemgetter

dic_contactos = {}
contactos = []
numeros_contactos = []

def ajuda():
   """
    - Ferramenta para gerir uma lista de contactos

    Comandos:

    lista_telefonica               Imprime na tela a lista atualizada de contactos
    adicionar                      Adiciona um novo contacto
    editar [Id]                    Edita o contacto com o identificador [Id]
    apagar [Id]                    Elimina o contacto com o identificador [Id]
    ordem_alfabetica               Apresenta a lista total de contactos por ordem alfabética
    pesquisar [Nome]               Pesquisa e apresenta os resultados da procura por [Nome] na lista
    importar [ficheiro]            Importa uma lista de contactos de um ficheiro [JSON]
    extrair [formato][ficheiro]    Extrai a lista de contactos para um ficheiro com um determinado formato 
                                   [YAML],[TXT] ou [XML]. Por padrão será [YAML]
    """

help(ajuda)

def lista_telefonica():
    print('-' * 30)
    print('\tLista Telefónica')
    print('-' * 30) 

    if len(contactos) == 0:
      print('Ops, lista vazia!')
      print('Utilize a função adicionar() para adicionar contactos.')
    else:
      for p in contactos:
        for k, v in p.items():
            print(f'{k}: {v}')
        print('-' * 30)
        
lista_telefonica()

def adicionar():
    dic_contactos.clear()
    while True:
        try:
            if len(contactos) == 0:
              id_contacto = int(input('Id do contacto: '))
              nome_contacto = input('Nome: ').strip().title()
              sobrenome_contacto = input('Sobrenome: ').strip().title()
            else:
              for p in range(len(contactos)):
                while True:
                  id_contacto = int(input('Id do contacto: '))
                  if contactos[p]['Id'] == id_contacto:
                      print('Erro Id já existe!')
                      continue
                  else:
                      break
              nome_contacto = input('Nome: ').strip().title()
              sobrenome_contacto = input('Sobrenome: ').strip().title()   
        except ValueError:
            print('Desculpe, formato inválido!')
            continue
        else:
            break

    dic_contactos['Id'] = id_contacto
    dic_contactos['Nome'] = nome_contacto
    dic_contactos['Sobrenome'] = sobrenome_contacto

    while True:
        try:
            numero = int(input('Quantos números esse contato possui? '))
            numeros_contactos.clear()
            for i in range(0, numero):
              num = int(input(f'Número {i+1}: '))
              numeros_contactos.append(num)
              dic_contactos['Números'] = numeros_contactos[:]
            contactos.append(dic_contactos.copy())
        except ValueError:
            print('Desculpe, formato inválido!')
            continue
        else:
            break
            
adicionar()

def editar(Id):
 for p in range(len(contactos)):
    if contactos[p]['Id'] == Id:
      while True:
        try:
          contactos[p]['Id'] = int(input('Id do contacto: '))
          contactos[p]['Nome']  = input('Nome: ').strip().title()
          contactos[p]['Sobrenome'] = input('Sobrenome: ').strip().title()
        except ValueError:
            print('Desculpe, formato inválido!')
            continue
        else:
            break

      while True:
        try:
            numero = int(input('Quantos números esse contato possui? '))
            numeros_contactos.clear()
            for i in range(0, numero):
              num = int(input(f'Número {i+1}: '))
              numeros_contactos.append(num)
              contactos[p]['Números'] = numeros_contactos[:]
        except ValueError:
            print('Desculpe, formato inválido!')
            continue
        else:
 
            break
editar()

def apagar(Id):
  for p in range(len(contactos)):
    if contactos[p]['Id'] == Id:
        del contactos[p]
        break

apagar()

def ordem_alfabetica():
  contactos_ordenado = sorted(contactos, key=itemgetter('Nome')) 

  print('-' * 30)
  print('\tLista Telefónica')
  print('       em ordem alfabética')
  print('-' * 30) 

  for p in contactos_ordenado:
        for k, v in p.items():
            print(f'{k}: {v}')
        print('-' * 30)

ordem_alfabetica()

def pesquisar(Nome):
  for p in range(len(contactos)):
    if contactos[p]['Nome'] == Nome.title():
        print(contactos[p])
        break

pesquisar()

def importar(ficheiro):
  f = open(ficheiro)
  novos_contactos = json.load(f)
  
  contactos2 = []
  contactos2 = contactos.copy() 
  contactos2.append(novos_contactos)

  with open('lista_contactos_completa.json', 'w', encoding='utf8') as f:
      json.dump(contactos2, f, ensure_ascii=False)

  with open('lista_telefonica', 'w', encoding='utf8') as f:
      json.dump(contactos, f, ensure_ascii=False)

importar()

def extrair(formato, ficheiro):
    ficheiro = ficheiro
    f = open(ficheiro)
    arquivo = json.load(f)

    if formato == "YAML" or formato == "yaml":
      f = open(ficheiro + ".yaml", "w")
      for dado in arquivo:
          id = dado['Id']
          nome = dado['Nome']
          sobrenome = dado['Sobrenome']
          numeros = dado['Números']
          f.write(f'id: {id} \n')
          f.write(f'nome: {nome} \n')
          f.write(f'sobrenome: {sobrenome} \n')
          f.write(f'numeros: {numeros} \n')


    elif formato == "":
        f = open(ficheiro + ".yaml", "w")
        for dado in arquivo:
          id = dado['Id']
          nome = dado['Nome']
          sobrenome = dado['Sobrenome']
          numeros = dado['Números']
          f.write(f'id: {id} \n')
          f.write(f'nome: {nome} \n')
          f.write(f'sobrenome: {sobrenome} \n')
          f.write(f'numeros: {numeros} \n')


    elif formato == "TXT" or formato == "txt":
      f = open(ficheiro + ".txt", "w")
      for dado in arquivo:
          id = dado['Id']
          nome = dado['Nome']
          sobrenome = dado['Sobrenome']
          numeros = dado['Números']
          f.write('id: ' + str(id) + '\n')
          f.write('nome: ' + nome + '\n')
          f.write('sobrenome: ' + sobrenome + '\n')
          f.write('numeros: ' + str(numeros) + '\n')

      
    elif formato == "XML" or formato == "xml":
      f = open(ficheiro + ".xml", "w")
      for dado in arquivo:
          id = dado['Id']
          nome = dado['Nome']
          sobrenome = dado['Sobrenome']
          numeros = dado['Números']
          f.write('<id>' + str(id) + '</id>\n')
          f.write('<nome>' + nome + '</nome>\n')
          f.write('<sobrenome>' + sobrenome + '</sobrenome>\n')
          f.write('<numeros>' + str(numeros) + '</numeros>\n')

    else:
        print("ERRO: Formato Inválido.")
        print("Não foi possível gerar o resultado.")

extrair()